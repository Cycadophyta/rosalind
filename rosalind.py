""" 
Counting DNA Nucleotides

    count_nucleotides(seq::string)

Returns a count of each nucleotide in the sequence
in the order A, C, G, T.

# Args
- seq: a DNA string
"""
function count_nucleotides(seq::String)
    counts = Dict(base => 0 for base in "ACGT")
    for base in seq
        counts[base] += 1
    end
    for base in "ACGT"
        print("$(counts[base]) ")
    end
    return counts
end

#count_nucleotides("CGCTCAATTATGTTGAACGATTGATATTAATTCCCTAGGGAGGTAGACGGATTATTTGTTTGTAAGGGTTTATACAATCGGGGCATCACCTAGCGCCGACCTTCATGGTTCATAGGCGGGGACCGGGGTGTCTAGTACTTACAGGGGAAAACGTGATGGGCACGCCCCGGGGAAAACAATGGCAATGAGAGCCTGAAGATACTTCCTCGAGGATGGTTGTCACCACGTGAGTGTCAGTCGCACGTTAAGCAGTTTTTAGACGTCGATGTAACATACCAGCCTAAATCCGGTGATGACTGGCCTCTCTAAGCCGCCCCATCTATCCGGAGGACAGGTCACTTCATCTTTATTGCGCTGGGGCGGGCGAAACAGGAAGTTCACTGTGGCTCATACCTGATCTGTTACCTTTGCGGGGACGACGAAGGGACCACTTGAAACTGTAGCTTGACTCTCGTAATGCGCTTAAAGTCAGGGAAATGAAAGCATGGCGCGGTCCTTCCCCGGCATTGGTGCACGCTTGGTTCCTTACGCTAGTCGCAAGCTGAGATGGTGAACGGAGAGGGCTTGTGCCTGTTATGGCAACCTCCCACCTCACTGGCCAAGGCACGGTTTATGCTATTGACCCCCAGGATGGACTGGTAGTTCCTAACGCGCCACTCGCGCCAGGTGCACCGTGTCAAGTCTCTACATGTGAACGTACTATACCAGGGTTCAACGACAAATCCGGCTGTGTCTACTAATCATTTTACTACGTTGAGGAGCATCAAAGGTTAGTGTTATTCTGCCATTGGGCTGGGCGATGCTCGCCTTTCGCCGCGAGATCGTGATCTCACCCACGGTAGAATTTTCAATGCGATACCGAAAGCCCCCGAAGGGCGCAGC")


"""
Transcribing DNA into RNA.

    transcribe(seq::String)

Returns the RNA transcript of a DNA string with 'T' replaced with 'U'.

# Args
- seq: a DNA string
"""
function transcribe(seq::String)
    transcribed = replace(seq, 'T' => 'U')
    println(transcribed)
    return transcribed
end

#transcribe("GGGCATGGGCACGACTACAGACAAAATCGCGGCTCCGCTTACGTGGCCGTCGTCAGCAGCCTTTCCCTGTCCCACCTTCTGACAGCGAAGATGCTCGGCACGGCGTCGAGAGGGCGGAACCACATATTGGGAACGGAACTGATTGGGGAAAATTATTTGCCTTATCGATATTATTCATGGAGTCCAGTCATTAGGCTGAGCACCAACCCGGTTACACTCCCCCCCCCGGACCCACGAAATAGCCCGTGTCAAGTACGTCGTGGGTGACCTCATCAAAAAGTTATATATAGAAGAATTATATGCGCGTGGTTGAATCGTGGACAACGGATAGCCGCATAGGCATTATTGAGCCGTATCCAGGCTGTAGAGGTGATGATGACTACCACTAATCGGACAGGGGCCGACCATAAGACTCCGCTCATGTAGCTATGCTTACGGCGTGGATGGTACTGGTACCCCAGGTCGCGGACCTTGCCCCTACAATTGGCCACGCGGGCACCAGTTTACCATAAGTGAGATGAGATTTCAGTAGATTATCGCAGATCTTCGCACCAGACGCACCTCATGCCCCCGTTATTGCCAAATTAGCCACCCTAGAGGCGCAGGCTTAGCCTGCGTCAGCAAGACAACAGGGGAGGGACCTGCCACCAGACGGACGTACCGTTACGCACTATTCACCTGTCCATTATCGCCGCATTTGGAACATATCGTTTCAATTCGAGGCGCTTTGTGTAAGCTTCTCCATGTTTTTTCGACTTTCACGGCACAGCGATAATGGCGATTGGATTCCTATCTCTCGTGCATGCTACCGGCTGTGAAGTGATCCTCTTCATACCTTGCTCTGGTTCTCGCTATCGGCGCCCGCCCGTTCGTCAGAACGCTCCTGAGGTTTATGGAAGACTTCTCAATAAATCGTTGTATCTTATGATAAATAGTGTTGGCGATCTGTGAACTGCTA")

"""
Complementing a Strand of DNA

    complement(seq::String)

Returns the reverse complement of a DNA string.

# Args
- seq: a DNA string
"""
function complement(seq::String)
    pairs = Dict('A' => 'T', 'T' => 'A', 'C' => 'G', 'G' => 'C')
    complement = ""
    for base in reverse(seq)
        complement *= pairs[base]
    end
    println(complement)
    return complement
end 

#complement("GAGTCGCTGGGCTCCAGGATTCCAAGAGGTCACAGACCTGTCCTGGCTAGGGGACAAACGTCACGCTTTGGCTCCTAGAACGTACGGCACATGTAGAAATTCCGCCCATGGATTCGAGAGATGCCATCTTTCCACCAAATCCGGAAATAAGCGCCTCCGCCAGGATCTGTACGAAATTAATCATCGGTATAGAGGGGACGTACCCTGGGTTACGATATCACACACTTTGTTAGCCGATCCTCCCCTCCCCAGCGTAAGCTTGCCGGACTCGTTAGCGCACTGATACTATACCTAATAGAGTGTTATAGATGCGCCAAGGTTTAGTTATAGCCCGCGACTGACTGTTCCACCATTCTTGTAACCGGCTGCCCAACATTATATGTCGCGATTATCGCCTTGCTGGTACACGTGTCCGCGGATTGAGTGGAGCCGATGCAGGTTTTCAATCGTAGGTTGATTACGATTTGTGTGGGTGTTTGCTGTATTTTTGCAACAAGTTCAACCAGTCGCCATGAACCACCGTATCAGGACGCGTGCCCGTCTTGTCTTTCGACATATCGCGGTTGAGCACTCGCGGCCGAAAGGAGTCTCGTATTGTAAAACTGGTGAGCACTCCGTTGACGCCAACTCGGTTTCGGTCCTGACCGGCCACATTGATTCACGAGAGGGTATGCGCTCTCTGCAAGGGCACTTCTTGATGCGGGAGGAATGTGTATGTAATCAGGGGATGCCCCCAGGCGACCTGTTGTCGGGAGACTATTTGTCATGTGCTTGGTTCCTGCCTAGGGTCAGATAAAACCGGCCCAACTGAGAGTGATTGTCCCGGCTAAACAAATAGCAGTACACGTCTTATTTTTAATTGCAACTTTGACCCGAAATAGTTTCTATCACCAGGTACTTTCCGAGTCCTGCGGAAGTGCATTTCTGGATGCGGTTTTGTTGTTAGAAATAAAAAAGATTGGTGGCCTTGTCCAGAATT")


"""
Rabbits and Recurrence Relations

    rabbit_recurrence(n::Int, k::Int)

# Args
- n: total number of months <= 40
- k: litter size (pairs) <= 5
"""
function rabbit_recurrence(n::Int, k::Int)
    rabbits = fill(1, n)
    for i = 3:n
        rabbits[i] = rabbits[i-1] + rabbits[i-2] * k
    end
    println(rabbits[n])
    return rabbits 
end

#rabbit_recurrence(32, 2)


"""
FASTA
"""
function read_fasta(fasta)
    sequences = Dict{String, String}()
    seq_strings = split(fasta, '>')
    popfirst!(seq_strings)
    for i in seq_strings
        seq = split(i, "\n")
        sequences[seq[1]] = seq[2]
    end
    return sequences
end

#println(read_fasta(">ros\nACT\n>ros2\nAGGTC\n>ros\nATC"))


"""
Computing GC Content

"""
function cg_content(seq)
    return countmap([base for base in seq])
end

println(cg_content("AAACCTC"))


function cg_content_2(fasta)
    cg_content = Dict()
    for i in sequences
        cg_content[i[1]] = cg_content(i[2])
    end
    println(sequences)
    return sequences
end

#cg_contentr(">ros\nACT\n>ros2\nAGGTC\n>ros\nATC")